from typing import Literal
from pydantic import validate_call

g = 9.81

@validate_call
def calculate_water_storage(
    Qhhr_kW: float,    # Расход тепла в час макс. водопотребления, кВт
    Qht_kW: float,     # Расход тепла в средний час, кВт
    Qsp_kW: float,     # Расчетная мощность водоподогревателя, кВт
    phi: Literal["A", "B"] = "A",
    T: int = 24,       # Период потребления, часы
    th: float = 65,    # Температура горячей воды, °C
    tc: float = 5      # Температура холодной воды, °C
) -> float:
    """
    Расчет регулирующего объема бака-аккумулятора теплоты для системы ГВС.

    Параметры:
    Qhhr_kW (float): Расход тепла в час макс. водопотребления (кВт)
    Qht_kW (float): Расход тепла в средний час (кВт)
    Qsp_kW (float): Расчетная мощность водоподогревателя (кВт)
    phi (str): Режим работы ('A' или 'B'). По умолчанию 'A'
    T (int): Период потребления (часы). По умолчанию 24
    th (float): Температура горячей воды (°C). По умолчанию 65
    tc (float): Температура холодной воды (°C). По умолчанию 5

    Возвращаемые значения:
    W1_m3 (float): Регулирующий объем бака-аккумулятора (м³)

    Описание:
    Функция рассчитывает регулирующий объем бака-аккумулятора теплоты с учетом:
    - режима работы водонагревателя
    - часовых нагрузок
    - температурных параметров
    - периода потребления
    """

    # Вывод исходных данных
    print("\nРасчет регулирующего объема бака-аккумулятора теплоты")
    print("Исходные данные:")
    print(f"  Режим работы: {phi}")
    print(f"  Расход тепла в час макс. водопотребления (Qhhr): {Qhhr_kW} кВт")
    print(f"  Расход тепла в средний час (Qht): {Qht_kW} кВт")
    print(f"  Расчетная мощность водоподогревателя (Qsp): {Qsp_kW} кВт")
    print(f"  Температура горячей воды (th): {th} °C")
    print(f"  Температура холодной воды (tc): {tc} °C")
    print(f"  Период потребления (T): {T} ч")

    # Расчет коэффициентов
    K = round(Qhhr_kW / Qht_kW, 2)
    Ksp = round(Qsp_kW / Qht_kW, 2)

    # Определение коэффициента φ в зависимости от режима
    if phi == 'A':
        # Режим A: непрерывная работа с переменной производительностью
        phi_value = round(1 - Ksp + (K-1) * pow((Ksp/K), (K/(K-1))), 2)
    elif phi == 'B':
        # Режим B: равномерная непрерывная работа
        phi_value = round(1 - Ksp + (K-1) * pow((Ksp/K), (K/(K-1))) + pow(((Ksp-1)/K), K), 2)
    else:
        raise ValueError("Режим работы (phi) может быть только 'A' или 'B'")

    # Расчет регулирующего объема
    W1 = round(phi_value * T * Qht_kW / (1.163 * (th - tc)), 2)

    # Вывод результатов расчета
    print("\nРезультаты расчета:")
    print(f"  Коэффициент часовой неравномерности (K): {K}")
    print(f"  Коэффициент мощности (Ksp): {Ksp}")
    print(f"  Коэффициент режима (φ): {phi_value}")
    print(f"  Регулирующий объем бака (W1): {W1} м³\n")

    return W1
